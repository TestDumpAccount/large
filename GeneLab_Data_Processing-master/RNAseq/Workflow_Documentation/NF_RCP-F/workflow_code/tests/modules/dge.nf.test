nextflow_process {

    name "Test Process DGE_BY_DESEQ2"
    script "modules/dge.nf"
    process "DGE_BY_DESEQ2"
    
    test("Baseline_ON_GLDS-194:Should run without failures AND PASS VV VALIDATION") {

        when {
            params {
                // define parameters here. Example:
                use_dummy_gene_counts = true
            }
            process {
                """
                // define inputs of the process here. Example:
                input[0] = file("test-datasets-extended/testdata/GLDS-194/Metadata/GLDS-194_bulkRNASeq_v1_runsheet.csv")
                input[1] = file("test-datasets-extended/testdata/GLDS-194/03-RSEM_Counts/*.genes.results")
                input[2] = [ primary_keytype:'ENSEMBL' ]
                input[3] = file("https://figshare.com/ndownloader/files/36597114")
                input[4] = file("${ baseDir }/bin/dge_annotation_R_scripts.zip")
                """
            }
        }

        then {
            assert process.success
            assert snapshot(
                process.out.dge,
                process.out.norm_counts,
                process.out.dge_ercc,
                process.out.norm_counts_ercc,
                process.out.version,
                ['Passes bulkRNASeq.checks.check_dge_table_group_columns_constraints' : true, 'dp_tools_version' : '1.1.8'] // MANUALLY Validated!
            ).match()
        }

    }

    test("ISSUE_55_ON_GLDS-321:Should run without failures AND PASS VV VALIDATION") {

        when {
            params {
                // define parameters here. Example:
                use_dummy_gene_counts = true
            }
            process {
                """
                // define inputs of the process here. Example:
                input[0] = file("test-datasets-extended/testdata/GLDS-321/Metadata/GLDS-321_bulkRNASeq_v1_runsheet.csv")
                input[1] = file("test-datasets-extended/testdata/GLDS-321/03-RSEM_Counts/*.genes.results")
                input[2] = [ primary_keytype:'TAIR' ]
                input[3] = file("https://figshare.com/ndownloader/files/36597132")
                input[4] = file("${ baseDir }/bin/dge_annotation_R_scripts.zip")
                """
            }
        }

        then {
            assert process.success
            assert snapshot(
                process.out.dge,
                process.out.norm_counts,
                // NON_ERCC process.out.dge_ercc,
                // NON_ERCC process.out.norm_counts_ercc,
                process.out.version,
                ['Passes bulkRNASeq.checks.check_dge_table_group_columns_constraints' : true, 'dp_tools_version' : '1.1.8'] // MANUALLY Validated!
            ).match()
        }

    }

    test("ISSUE_55_ON_Mock:Should run without failures") {

        when {
            params {
                // define parameters here. Example:
                use_dummy_gene_counts = true
            }
            process {
                """
                // define inputs of the process here. Example:
                input[0] = file("test-datasets-extended/testdata/mocks/overlapping_samplenames/MOCK_bulkRNASeq_v1_runsheet.csv")
                input[1] = file("test-datasets-extended/testdata/mocks/overlapping_samplenames/*.genes.results")
                input[2] = [ primary_keytype:'ENSEMBL' ]
                input[3] = file("https://figshare.com/ndownloader/files/36597114")
                input[4] = file("${ baseDir }/bin/dge_annotation_R_scripts.zip")
                """
            }
        }

        then {
            assert process.success
            assert snapshot(
                process.out.dge,
                process.out.norm_counts,
                // NON_ERCC process.out.dge_ercc,
                // NON_ERCC process.out.norm_counts_ercc,
                process.out.version,
                ['Passes bulkRNASeq.checks.check_dge_table_group_columns_constraints' : true, 'dp_tools_version' : '1.1.8'] // MANUALLY Validated!
            ).match()
        }

    }

}
